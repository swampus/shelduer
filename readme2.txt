# Shelduer

> **Declarative Access Control for Self-Modifying and Dynamic Code**

![Build](https://img.shields.io/badge/build-passing-brightgreen) ![License](https://img.shields.io/badge/license-MIT-blue)

---

## üöÄ Overview

**Shelduer** is a framework that replaces `volatile`, `synchronized`, and `Atomic` structures with a **declarative, pluggable, and aspect-oriented** access scheduler.

It is designed for:
- Self-modifying AI systems
- Runtime-generated code
- Hot-deployable services
- Dynamic or interpreted environments (e.g., plugin-based systems)

---

## üî• Why Not Volatile or Synchronized?

| Feature / Mechanism     | `volatile` | `synchronized` | `Atomic` | `Shelduer`            |
|------------------------|------------|----------------|----------|------------------------|
| Works across class reloads | ‚ùå         | ‚ùå             | ‚ùå       | ‚úÖ                     |
| Declarative            | ‚ùå         | ‚ùå             | ‚ùå       | ‚úÖ (with annotations)   |
| Hot-swappable logic    | ‚ùå         | ‚ùå             | ‚ùå       | ‚úÖ                     |
| Key-based locking      | ‚ùå         | üî∏ Object only  | ‚ùå       | ‚úÖ (String or custom)  |
| Introspectable policy  | ‚ùå         | ‚ùå             | ‚ùå       | ‚úÖ                     |

---

## ‚ú® Key Concepts

### @AccessSchedule
```java
@AccessSchedule(
    key = "#{#user.id}",
    policy = AccessPolicy.EXCLUSIVE,
    timeoutMs = 5000
)
public void updateProfile(User user) {
    // Controlled access to "user.id" resource
}
```

### KeyProvider Interface
```java
public interface KeyProvider {
    String resolveKey(JoinPoint joinPoint, Object[] args);
}
```

Use it to resolve dynamic access keys at runtime.

### LedgerTable
An in-memory or distributed table tracking which logical keys are being used and by whom. Think of it as a programmable lock manager.

### Access Policies
```java
public enum AccessPolicy {
    EXCLUSIVE,
    FAIR,
    LAST_WRITE_WINS,
    SKIP_IF_BUSY
}
```

---

## üß† Designed for AI & Self-Mutating Systems
Shelduer is perfect for:
- AI models rewriting their own methods
- Runtime mutation of services
- Systems using interpreted bytecode or scripts

```java
@AccessSchedule(key = "compilation")
public void mutateOwnCode() {
    // Safe zone for AI to recompile or alter logic
}
```

---

## üõ†Ô∏è Roadmap
- [x] Basic annotation processor with Spring AOP
- [x] In-memory `LedgerTable`
- [ ] YAML-based access policy config
- [ ] Distributed ledger support (Redis / embedded)
- [ ] Runtime rule injection API
- [ ] Dynamic key resolution via SpEL and providers
- [ ] Support for timeout and queue-based access control
- [ ] Test suite with high concurrency examples
- [ ] Integration with dynamic bytecode engines

---

## ü§ò Philosophy

> "Don‚Äôt lock threads. Schedule intent."

Let your code evolve. Let your AI adapt. Let Shelduer control the flow.

---

## License
MIT License

---

## Author
[@swampus](https://github.com/swampus) ‚Äî Creator of sentient scheduling primitives üòà



üîπ 1. ‚úÖ –ë–∞–∑–æ–≤—ã–π –º–∏–Ω–∏–º—É–º (–ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤)
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç	–°—Ç–∞—Ç—É—Å	–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
–ß–∏—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞	‚úÖ	–û—Ç–ª–∏—á–Ω–∞—è –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—å –∏ SPI
–†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å	‚úÖ	–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, SpEL
–ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è	‚úÖ	Spring Boot Starter —É–∂–µ –µ—Å—Ç—å
–ü—Ä–∏–º–µ—Ä—ã	‚ö†Ô∏è	–ù—É–∂–Ω–æ 2‚Äì3 —Å—Ü–µ–Ω–∞—Ä–∏—è: REST-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä, –æ—á–µ—Ä–µ–¥—å, Redis
–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è	‚ö†Ô∏è	README.md –Ω–æ—Ä–º, –Ω–æ –Ω—É–∂–µ–Ω upgrade —Å –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏
–Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã	‚ö†Ô∏è	Core-—Ç–µ—Å—Ç—ã –µ—Å—Ç—å? –î–æ–±–∞–≤—å –µ—â—ë edge-cases

üî∏ 2. üí™ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
üìå shelduer-redis
RedisAccessLedger

TTL + fairness + –∂—É—Ä–Ω–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Spring Boot @ConditionalOnProperty("shelduer.ledger.type=redis")

üìå shelduer-metrics
–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Micrometer

–≠–∫—Å–ø–æ–∑–∏—Ü–∏—è:

–∫–æ–ª-–≤–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤

—Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è

top-5 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö –∫–ª—é—á–µ–π

Prometheus endpoint: /actuator/metrics/shelduer.*

üìå –†–∞—Å—à–∏—Ä—è–µ–º—ã–π AccessContext
–û–±—ä–µ–∫—Ç-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–º–µ—Å—Ç–æ —Å—ã—Ä—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤

–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞, –ø—Ä–∏—á–∏–Ω—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üî∏ 3. üß† –£–º–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞
üìå ShelduerPolicyEngine
–°—Ü–µ–Ω–∞—Ä–∏–∏ –≤–∏–¥–∞: "user.admin" –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø –º–≥–Ω–æ–≤–µ–Ω–Ω–æ

–ü–æ–¥–¥–µ—Ä–∂–∫–∞ SpEL-like –ø—Ä–∞–≤–∏–ª + whitelist/blacklist

–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫–∞–∫ –±–∏–Ω AccessPolicyResolver

üìå –ü–ª–∞–≥–∏–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
AccessDecisionVoter (–∫–∞–∫ –≤ Spring Security)

–í–Ω–µ—à–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ –±–∞–∑—ã

üî∏ 4. üíº –ü—Ä–æ–¥–∞–∫—à–Ω-–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏ DevOps
üì¶ CI/CD:
GitHub Actions –∏–ª–∏ Jenkins

–°–±–æ—Ä–∫–∞ ‚Üí –¢–µ—Å—Ç—ã ‚Üí Publish snapshot –≤ GitHub Packages

(–ø–æ–∑–∂–µ) Release –≤ Maven Central

üß™ 100% –ø–æ–∫—Ä—ã—Ç–∏–µ core API
–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Ç–∞–π–º–∞—É—Ç—ã, –∏—Å–∫–ª—é—á–µ–Ω–∏—è, —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã

üîç –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:
–°–æ–±—ã—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

Thread name, –∫–ª—é—á, –ø–æ–ª–∏—Ç–∏–∫–∞, —Ç–∞–π–º–∞—É—Ç, —É—Å–ø–µ—Ö/–æ—à–∏–±–∫–∞

shelduer.access.eventLogger=console/json

üî∏ 5. üèóÔ∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
Spring Web: –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å REST –º–µ—Ç–æ–¥—ã

Kafka listener: –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É

Hibernate: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –¥—É–±–ª–∏ –ø—Ä–∏ @Transactional

Annotations-on-Fields –¥–ª—è @AccessControlled private Resource resource;

üî∏ 6. üéì –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
docs/Shelduer-Architecture.md ‚Äî –∫–∞–∫ –≤—Å—ë —É—Å—Ç—Ä–æ–µ–Ω–æ

docs/UseCases.md ‚Äî 5+ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤

img/ ‚Äî –¥–∏–∞–≥—Ä–∞–º–º–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –ø–æ—Ç–æ–∫–æ–≤

README.md —Å –±–µ–π–¥–∂–∞–º–∏: CI, Test Coverage, Maven Central

üî∏ 7. üåê –û–±—ë—Ä—Ç–∫–∞ –∏ —Å–∞–π—Ç
–°–∞–π—Ç –Ω–∞ GitHub Pages

–°—Å—ã–ª–∫–∞ –Ω–∞ Javadoc

–ö–Ω–æ–ø–∫–∞ "Try it" —Å Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º

–í–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—É—â–∏—Ö –ª–æ—á–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π (–≤ –±—É–¥—É—â–µ–º)
